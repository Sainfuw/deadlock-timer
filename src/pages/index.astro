---
import Layout from '../layouts/Layout.astro'
---

<Layout title='Welcome to Astro.'>
  <main>
    <div id='map'>
      <div id='volumeContainer'>
        <input
          type='range'
          id='volumeControl'
          min='0'
          max='1'
          step='0.1'
          value='0.1'
        />
      </div>
    </div>

    <audio id='endSound' src='./sounds/respawn.mp3' preload='auto'></audio>
  </main>
</Layout>

<script>
  import L from 'leaflet'
  import 'leaflet/dist/leaflet.css'
  const jungleData = await import('../data/jungle.json').then((m) => m.default)
  const jungleTimer = { tier1: 240, tier2: 360, tier3: 480 }

  const map = L.map('map', {
    crs: L.CRS.Simple,
    maxZoom: 2,
    minZoom: 0,
  })

  const bounds = [
    [0, 0],
    [600, 600],
  ] as L.LatLngBoundsExpression
  const imageUrl = './images/map.png'

  const volumeControl = document.getElementById(
    'volumeControl'
  ) as HTMLInputElement
  const endSound = document.getElementById('endSound') as HTMLAudioElement

  endSound.volume = +volumeControl.value
  volumeControl.addEventListener('input', function () {
    endSound.volume = +this.value
  })

  volumeControl.addEventListener('mousedown', function (e) {
    e.stopPropagation()
  })

  L.imageOverlay(imageUrl, bounds).addTo(map)
  map.fitBounds(bounds)

  function addCircleWithTimer(
    id: number,
    lat: number,
    lng: number,
    timeLeft: number = 3
  ) {
    const circle = L.circle([lat, lng], {
      color: 'black',
      fillColor: '#000',
      fillOpacity: 0.5,
      radius: 15,
    }).addTo(map)

    const timerDiv = L.divIcon({
      className: 'timer',
      html: `
        <div id="timerText-${id}">
          <h3></h3>
        </div>
      `,
      iconSize: [50, 50],
    })

    L.marker([lat, lng], { icon: timerDiv })
      .on('click', function () {
        startTimer(timeLeft, id)
      })
      .addTo(map)

    let timerInterval: number | undefined
    function startTimer(timeLeft: number, id: number) {
      const $text = document.querySelector(
        `#timerText-${id} h3`
      ) as HTMLHeadingElement

      function update() {
        timeLeft -= 1
        updateTimerText(timeLeft, id)
        if (timeLeft <= 0) {
          clearInterval(timerInterval)
          $text.innerText = 'X'
          return endSound.play()
        }
        timerInterval = setTimeout(update, 1000)
      }
      update()
    }
  }

  function updateTimerText(timeLeft: number, id: number) {
    const $text = document.querySelector(
      `#timerText-${id} h3`
    ) as HTMLHeadingElement
    const zoomLevel = map.getZoom()
    const fontSize = Math.round((zoomLevel + 1) ** 3.5 + 10)

    $text.innerText = `${timeLeft}`
    $text.style.fontSize = `${fontSize}px`
  }

  map.on('zoomend', function () {
    const $texts = document.querySelectorAll('#timerText h3')
    const zoomLevel = map.getZoom()
    const fontSize = Math.round((zoomLevel + 1) ** 3.5 + 10)

    $texts.forEach((text: HTMLHeadingElement | any) => {
      text.style.fontSize = `${fontSize}px`
    })
  })

  jungleData.map(({ lat, lng, timer }, id) => {
    addCircleWithTimer(id, lat, lng, (jungleTimer as any)[timer])
  })
</script>

<style is:inline>
  #map {
    height: 100vh;
    aspect-ratio: 1 / 1;
    background: transparent;
    position: relative;
  }

  #volumeContainer {
    position: absolute;
    top: 0;
    right: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 10px;
    border-radius: 5px;
  }

  #volumeControl {
    writing-mode: vertical-lr;
    direction: rtl;
    margin-top: 5px;
    cursor: pointer;
    height: 60px;
    width: 10px;
  }

  .timer {
    width: 100%;
    height: 100%;
    display: flex !important;
    justify-content: center;
    align-items: center;
    color: white;
  }

  .leaflet-control-attribution {
    display: none;
  }
</style>
